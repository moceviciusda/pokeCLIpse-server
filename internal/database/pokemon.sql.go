// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pokemon.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemon (id, created_at, updated_at, name, level, shiny, ivs_id, owner_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, level, shiny, ivs_id, owner_id
`

type CreatePokemonParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Level     int32
	Shiny     bool
	IvsID     uuid.UUID
	OwnerID   uuid.UUID
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (Pokemon, error) {
	row := q.db.QueryRowContext(ctx, createPokemon,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Level,
		arg.Shiny,
		arg.IvsID,
		arg.OwnerID,
	)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Level,
		&i.Shiny,
		&i.IvsID,
		&i.OwnerID,
	)
	return i, err
}

const getPokemon = `-- name: GetPokemon :one
SELECT id, created_at, updated_at, name, level, shiny, ivs_id, owner_id FROM pokemon WHERE id = $1
`

func (q *Queries) GetPokemon(ctx context.Context, id uuid.UUID) (Pokemon, error) {
	row := q.db.QueryRowContext(ctx, getPokemon, id)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Level,
		&i.Shiny,
		&i.IvsID,
		&i.OwnerID,
	)
	return i, err
}

const getUsersPokemon = `-- name: GetUsersPokemon :many
SELECT id, created_at, updated_at, name, level, shiny, ivs_id, owner_id FROM pokemon WHERE owner_id = $1
`

func (q *Queries) GetUsersPokemon(ctx context.Context, ownerID uuid.UUID) ([]Pokemon, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPokemon, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Level,
			&i.Shiny,
			&i.IvsID,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

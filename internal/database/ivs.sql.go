// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ivs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createIVs = `-- name: CreateIVs :one
INSERT INTO ivs (id, created_at, updated_at, hp, attack, defense, special_attack, special_defense, speed)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, hp, attack, defense, special_attack, special_defense, speed
`

type CreateIVsParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Hp             int32
	Attack         int32
	Defense        int32
	SpecialAttack  int32
	SpecialDefense int32
	Speed          int32
}

func (q *Queries) CreateIVs(ctx context.Context, arg CreateIVsParams) (Iv, error) {
	row := q.db.QueryRowContext(ctx, createIVs,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Hp,
		arg.Attack,
		arg.Defense,
		arg.SpecialAttack,
		arg.SpecialDefense,
		arg.Speed,
	)
	var i Iv
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
	)
	return i, err
}

const getIVs = `-- name: GetIVs :one
SELECT id, created_at, updated_at, hp, attack, defense, special_attack, special_defense, speed FROM ivs WHERE id = $1
`

func (q *Queries) GetIVs(ctx context.Context, id uuid.UUID) (Iv, error) {
	row := q.db.QueryRowContext(ctx, getIVs, id)
	var i Iv
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
	)
	return i, err
}
